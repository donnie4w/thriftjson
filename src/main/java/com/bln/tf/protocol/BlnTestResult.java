/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bln.tf.protocol;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 测试结果返回  {"ack":{"status":200,"ackCode":"1000","ackDesc":"ack描述","extramap":{"wu":"123456"}},"s":"test","i":0,"ls":["listTest","listTest2"]}
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-09-05")
public class BlnTestResult implements org.apache.thrift.TBase<BlnTestResult, BlnTestResult._Fields>, java.io.Serializable, Cloneable, Comparable<BlnTestResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BlnTestResult");

  private static final org.apache.thrift.protocol.TField ACK_FIELD_DESC = new org.apache.thrift.protocol.TField("ack", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField S_FIELD_DESC = new org.apache.thrift.protocol.TField("s", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField I_FIELD_DESC = new org.apache.thrift.protocol.TField("i", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LS_FIELD_DESC = new org.apache.thrift.protocol.TField("ls", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BlnTestResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BlnTestResultTupleSchemeFactory();

  /**
   * ack  (固定)
   */
  public BlnAckBean ack; // optional
  /**
   * string
   */
  public java.lang.String s; // optional
  /**
   * int
   */
  public int i; // optional
  /**
   * list
   */
  public java.util.List<java.lang.String> ls; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * ack  (固定)
     */
    ACK((short)1, "ack"),
    /**
     * string
     */
    S((short)2, "s"),
    /**
     * int
     */
    I((short)3, "i"),
    /**
     * list
     */
    LS((short)4, "ls");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACK
          return ACK;
        case 2: // S
          return S;
        case 3: // I
          return I;
        case 4: // LS
          return LS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __I_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ACK,_Fields.S,_Fields.I,_Fields.LS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACK, new org.apache.thrift.meta_data.FieldMetaData("ack", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BlnAckBean.class)));
    tmpMap.put(_Fields.S, new org.apache.thrift.meta_data.FieldMetaData("s", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.I, new org.apache.thrift.meta_data.FieldMetaData("i", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LS, new org.apache.thrift.meta_data.FieldMetaData("ls", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BlnTestResult.class, metaDataMap);
  }

  public BlnTestResult() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BlnTestResult(BlnTestResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAck()) {
      this.ack = new BlnAckBean(other.ack);
    }
    if (other.isSetS()) {
      this.s = other.s;
    }
    this.i = other.i;
    if (other.isSetLs()) {
      java.util.List<java.lang.String> __this__ls = new java.util.ArrayList<java.lang.String>(other.ls);
      this.ls = __this__ls;
    }
  }

  public BlnTestResult deepCopy() {
    return new BlnTestResult(this);
  }

  @Override
  public void clear() {
    this.ack = null;
    this.s = null;
    setIIsSet(false);
    this.i = 0;
    this.ls = null;
  }

  /**
   * ack  (固定)
   */
  public BlnAckBean getAck() {
    return this.ack;
  }

  /**
   * ack  (固定)
   */
  public BlnTestResult setAck(BlnAckBean ack) {
    this.ack = ack;
    return this;
  }

  public void unsetAck() {
    this.ack = null;
  }

  /** Returns true if field ack is set (has been assigned a value) and false otherwise */
  public boolean isSetAck() {
    return this.ack != null;
  }

  public void setAckIsSet(boolean value) {
    if (!value) {
      this.ack = null;
    }
  }

  /**
   * string
   */
  public java.lang.String getS() {
    return this.s;
  }

  /**
   * string
   */
  public BlnTestResult setS(java.lang.String s) {
    this.s = s;
    return this;
  }

  public void unsetS() {
    this.s = null;
  }

  /** Returns true if field s is set (has been assigned a value) and false otherwise */
  public boolean isSetS() {
    return this.s != null;
  }

  public void setSIsSet(boolean value) {
    if (!value) {
      this.s = null;
    }
  }

  /**
   * int
   */
  public int getI() {
    return this.i;
  }

  /**
   * int
   */
  public BlnTestResult setI(int i) {
    this.i = i;
    setIIsSet(true);
    return this;
  }

  public void unsetI() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __I_ISSET_ID);
  }

  /** Returns true if field i is set (has been assigned a value) and false otherwise */
  public boolean isSetI() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __I_ISSET_ID);
  }

  public void setIIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __I_ISSET_ID, value);
  }

  public int getLsSize() {
    return (this.ls == null) ? 0 : this.ls.size();
  }

  public java.util.Iterator<java.lang.String> getLsIterator() {
    return (this.ls == null) ? null : this.ls.iterator();
  }

  public void addToLs(java.lang.String elem) {
    if (this.ls == null) {
      this.ls = new java.util.ArrayList<java.lang.String>();
    }
    this.ls.add(elem);
  }

  /**
   * list
   */
  public java.util.List<java.lang.String> getLs() {
    return this.ls;
  }

  /**
   * list
   */
  public BlnTestResult setLs(java.util.List<java.lang.String> ls) {
    this.ls = ls;
    return this;
  }

  public void unsetLs() {
    this.ls = null;
  }

  /** Returns true if field ls is set (has been assigned a value) and false otherwise */
  public boolean isSetLs() {
    return this.ls != null;
  }

  public void setLsIsSet(boolean value) {
    if (!value) {
      this.ls = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ACK:
      if (value == null) {
        unsetAck();
      } else {
        setAck((BlnAckBean)value);
      }
      break;

    case S:
      if (value == null) {
        unsetS();
      } else {
        setS((java.lang.String)value);
      }
      break;

    case I:
      if (value == null) {
        unsetI();
      } else {
        setI((java.lang.Integer)value);
      }
      break;

    case LS:
      if (value == null) {
        unsetLs();
      } else {
        setLs((java.util.List<java.lang.String>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ACK:
      return getAck();

    case S:
      return getS();

    case I:
      return getI();

    case LS:
      return getLs();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ACK:
      return isSetAck();
    case S:
      return isSetS();
    case I:
      return isSetI();
    case LS:
      return isSetLs();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BlnTestResult)
      return this.equals((BlnTestResult)that);
    return false;
  }

  public boolean equals(BlnTestResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ack = true && this.isSetAck();
    boolean that_present_ack = true && that.isSetAck();
    if (this_present_ack || that_present_ack) {
      if (!(this_present_ack && that_present_ack))
        return false;
      if (!this.ack.equals(that.ack))
        return false;
    }

    boolean this_present_s = true && this.isSetS();
    boolean that_present_s = true && that.isSetS();
    if (this_present_s || that_present_s) {
      if (!(this_present_s && that_present_s))
        return false;
      if (!this.s.equals(that.s))
        return false;
    }

    boolean this_present_i = true && this.isSetI();
    boolean that_present_i = true && that.isSetI();
    if (this_present_i || that_present_i) {
      if (!(this_present_i && that_present_i))
        return false;
      if (this.i != that.i)
        return false;
    }

    boolean this_present_ls = true && this.isSetLs();
    boolean that_present_ls = true && that.isSetLs();
    if (this_present_ls || that_present_ls) {
      if (!(this_present_ls && that_present_ls))
        return false;
      if (!this.ls.equals(that.ls))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAck()) ? 131071 : 524287);
    if (isSetAck())
      hashCode = hashCode * 8191 + ack.hashCode();

    hashCode = hashCode * 8191 + ((isSetS()) ? 131071 : 524287);
    if (isSetS())
      hashCode = hashCode * 8191 + s.hashCode();

    hashCode = hashCode * 8191 + ((isSetI()) ? 131071 : 524287);
    if (isSetI())
      hashCode = hashCode * 8191 + i;

    hashCode = hashCode * 8191 + ((isSetLs()) ? 131071 : 524287);
    if (isSetLs())
      hashCode = hashCode * 8191 + ls.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(BlnTestResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAck()).compareTo(other.isSetAck());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAck()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ack, other.ack);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetS()).compareTo(other.isSetS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s, other.s);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetI()).compareTo(other.isSetI());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i, other.i);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLs()).compareTo(other.isSetLs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ls, other.ls);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BlnTestResult(");
    boolean first = true;

    if (isSetAck()) {
      sb.append("ack:");
      if (this.ack == null) {
        sb.append("null");
      } else {
        sb.append(this.ack);
      }
      first = false;
    }
    if (isSetS()) {
      if (!first) sb.append(", ");
      sb.append("s:");
      if (this.s == null) {
        sb.append("null");
      } else {
        sb.append(this.s);
      }
      first = false;
    }
    if (isSetI()) {
      if (!first) sb.append(", ");
      sb.append("i:");
      sb.append(this.i);
      first = false;
    }
    if (isSetLs()) {
      if (!first) sb.append(", ");
      sb.append("ls:");
      if (this.ls == null) {
        sb.append("null");
      } else {
        sb.append(this.ls);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (ack != null) {
      ack.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BlnTestResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BlnTestResultStandardScheme getScheme() {
      return new BlnTestResultStandardScheme();
    }
  }

  private static class BlnTestResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<BlnTestResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BlnTestResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ack = new BlnAckBean();
              struct.ack.read(iprot);
              struct.setAckIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // S
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.s = iprot.readString();
              struct.setSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // I
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.i = iprot.readI32();
              struct.setIIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.ls = new java.util.ArrayList<java.lang.String>(_list18.size);
                java.lang.String _elem19;
                for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                {
                  _elem19 = iprot.readString();
                  struct.ls.add(_elem19);
                }
                iprot.readListEnd();
              }
              struct.setLsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BlnTestResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ack != null) {
        if (struct.isSetAck()) {
          oprot.writeFieldBegin(ACK_FIELD_DESC);
          struct.ack.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.s != null) {
        if (struct.isSetS()) {
          oprot.writeFieldBegin(S_FIELD_DESC);
          oprot.writeString(struct.s);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetI()) {
        oprot.writeFieldBegin(I_FIELD_DESC);
        oprot.writeI32(struct.i);
        oprot.writeFieldEnd();
      }
      if (struct.ls != null) {
        if (struct.isSetLs()) {
          oprot.writeFieldBegin(LS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.ls.size()));
            for (java.lang.String _iter21 : struct.ls)
            {
              oprot.writeString(_iter21);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BlnTestResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BlnTestResultTupleScheme getScheme() {
      return new BlnTestResultTupleScheme();
    }
  }

  private static class BlnTestResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<BlnTestResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BlnTestResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAck()) {
        optionals.set(0);
      }
      if (struct.isSetS()) {
        optionals.set(1);
      }
      if (struct.isSetI()) {
        optionals.set(2);
      }
      if (struct.isSetLs()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetAck()) {
        struct.ack.write(oprot);
      }
      if (struct.isSetS()) {
        oprot.writeString(struct.s);
      }
      if (struct.isSetI()) {
        oprot.writeI32(struct.i);
      }
      if (struct.isSetLs()) {
        {
          oprot.writeI32(struct.ls.size());
          for (java.lang.String _iter22 : struct.ls)
          {
            oprot.writeString(_iter22);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BlnTestResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.ack = new BlnAckBean();
        struct.ack.read(iprot);
        struct.setAckIsSet(true);
      }
      if (incoming.get(1)) {
        struct.s = iprot.readString();
        struct.setSIsSet(true);
      }
      if (incoming.get(2)) {
        struct.i = iprot.readI32();
        struct.setIIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.ls = new java.util.ArrayList<java.lang.String>(_list23.size);
          java.lang.String _elem24;
          for (int _i25 = 0; _i25 < _list23.size; ++_i25)
          {
            _elem24 = iprot.readString();
            struct.ls.add(_elem24);
          }
        }
        struct.setLsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

