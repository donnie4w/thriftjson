/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bln.tf.protocol;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 返回ack对象
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-09-05")
public class BlnAckBean implements org.apache.thrift.TBase<BlnAckBean, BlnAckBean._Fields>, java.io.Serializable, Cloneable, Comparable<BlnAckBean> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BlnAckBean");

  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ACK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("ackCode", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ACK_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("ackDesc", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField EXTRAMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("extramap", org.apache.thrift.protocol.TType.MAP, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BlnAckBeanStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BlnAckBeanTupleSchemeFactory();

  /**
   * 分页
   */
  public BlnPageBean page; // optional
  /**
   * 状态，400错误  200成功
   */
  public int status; // optional
  /**
   * 状态码*
   */
  public java.lang.String ackCode; // optional
  /**
   * 状态描述
   */
  public java.lang.String ackDesc; // optional
  /**
   * 拓展字段
   */
  public java.util.Map<java.lang.String,java.lang.String> extramap; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 分页
     */
    PAGE((short)1, "page"),
    /**
     * 状态，400错误  200成功
     */
    STATUS((short)2, "status"),
    /**
     * 状态码*
     */
    ACK_CODE((short)3, "ackCode"),
    /**
     * 状态描述
     */
    ACK_DESC((short)4, "ackDesc"),
    /**
     * 拓展字段
     */
    EXTRAMAP((short)5, "extramap");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAGE
          return PAGE;
        case 2: // STATUS
          return STATUS;
        case 3: // ACK_CODE
          return ACK_CODE;
        case 4: // ACK_DESC
          return ACK_DESC;
        case 5: // EXTRAMAP
          return EXTRAMAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PAGE,_Fields.STATUS,_Fields.ACK_CODE,_Fields.ACK_DESC,_Fields.EXTRAMAP};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BlnPageBean.class)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACK_CODE, new org.apache.thrift.meta_data.FieldMetaData("ackCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACK_DESC, new org.apache.thrift.meta_data.FieldMetaData("ackDesc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTRAMAP, new org.apache.thrift.meta_data.FieldMetaData("extramap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BlnAckBean.class, metaDataMap);
  }

  public BlnAckBean() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BlnAckBean(BlnAckBean other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPage()) {
      this.page = new BlnPageBean(other.page);
    }
    this.status = other.status;
    if (other.isSetAckCode()) {
      this.ackCode = other.ackCode;
    }
    if (other.isSetAckDesc()) {
      this.ackDesc = other.ackDesc;
    }
    if (other.isSetExtramap()) {
      java.util.Map<java.lang.String,java.lang.String> __this__extramap = new java.util.HashMap<java.lang.String,java.lang.String>(other.extramap);
      this.extramap = __this__extramap;
    }
  }

  public BlnAckBean deepCopy() {
    return new BlnAckBean(this);
  }

  @Override
  public void clear() {
    this.page = null;
    setStatusIsSet(false);
    this.status = 0;
    this.ackCode = null;
    this.ackDesc = null;
    this.extramap = null;
  }

  /**
   * 分页
   */
  public BlnPageBean getPage() {
    return this.page;
  }

  /**
   * 分页
   */
  public BlnAckBean setPage(BlnPageBean page) {
    this.page = page;
    return this;
  }

  public void unsetPage() {
    this.page = null;
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return this.page != null;
  }

  public void setPageIsSet(boolean value) {
    if (!value) {
      this.page = null;
    }
  }

  /**
   * 状态，400错误  200成功
   */
  public int getStatus() {
    return this.status;
  }

  /**
   * 状态，400错误  200成功
   */
  public BlnAckBean setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  /**
   * 状态码*
   */
  public java.lang.String getAckCode() {
    return this.ackCode;
  }

  /**
   * 状态码*
   */
  public BlnAckBean setAckCode(java.lang.String ackCode) {
    this.ackCode = ackCode;
    return this;
  }

  public void unsetAckCode() {
    this.ackCode = null;
  }

  /** Returns true if field ackCode is set (has been assigned a value) and false otherwise */
  public boolean isSetAckCode() {
    return this.ackCode != null;
  }

  public void setAckCodeIsSet(boolean value) {
    if (!value) {
      this.ackCode = null;
    }
  }

  /**
   * 状态描述
   */
  public java.lang.String getAckDesc() {
    return this.ackDesc;
  }

  /**
   * 状态描述
   */
  public BlnAckBean setAckDesc(java.lang.String ackDesc) {
    this.ackDesc = ackDesc;
    return this;
  }

  public void unsetAckDesc() {
    this.ackDesc = null;
  }

  /** Returns true if field ackDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetAckDesc() {
    return this.ackDesc != null;
  }

  public void setAckDescIsSet(boolean value) {
    if (!value) {
      this.ackDesc = null;
    }
  }

  public int getExtramapSize() {
    return (this.extramap == null) ? 0 : this.extramap.size();
  }

  public void putToExtramap(java.lang.String key, java.lang.String val) {
    if (this.extramap == null) {
      this.extramap = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.extramap.put(key, val);
  }

  /**
   * 拓展字段
   */
  public java.util.Map<java.lang.String,java.lang.String> getExtramap() {
    return this.extramap;
  }

  /**
   * 拓展字段
   */
  public BlnAckBean setExtramap(java.util.Map<java.lang.String,java.lang.String> extramap) {
    this.extramap = extramap;
    return this;
  }

  public void unsetExtramap() {
    this.extramap = null;
  }

  /** Returns true if field extramap is set (has been assigned a value) and false otherwise */
  public boolean isSetExtramap() {
    return this.extramap != null;
  }

  public void setExtramapIsSet(boolean value) {
    if (!value) {
      this.extramap = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((BlnPageBean)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((java.lang.Integer)value);
      }
      break;

    case ACK_CODE:
      if (value == null) {
        unsetAckCode();
      } else {
        setAckCode((java.lang.String)value);
      }
      break;

    case ACK_DESC:
      if (value == null) {
        unsetAckDesc();
      } else {
        setAckDesc((java.lang.String)value);
      }
      break;

    case EXTRAMAP:
      if (value == null) {
        unsetExtramap();
      } else {
        setExtramap((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PAGE:
      return getPage();

    case STATUS:
      return getStatus();

    case ACK_CODE:
      return getAckCode();

    case ACK_DESC:
      return getAckDesc();

    case EXTRAMAP:
      return getExtramap();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PAGE:
      return isSetPage();
    case STATUS:
      return isSetStatus();
    case ACK_CODE:
      return isSetAckCode();
    case ACK_DESC:
      return isSetAckDesc();
    case EXTRAMAP:
      return isSetExtramap();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BlnAckBean)
      return this.equals((BlnAckBean)that);
    return false;
  }

  public boolean equals(BlnAckBean that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_page = true && this.isSetPage();
    boolean that_present_page = true && that.isSetPage();
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (!this.page.equals(that.page))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_ackCode = true && this.isSetAckCode();
    boolean that_present_ackCode = true && that.isSetAckCode();
    if (this_present_ackCode || that_present_ackCode) {
      if (!(this_present_ackCode && that_present_ackCode))
        return false;
      if (!this.ackCode.equals(that.ackCode))
        return false;
    }

    boolean this_present_ackDesc = true && this.isSetAckDesc();
    boolean that_present_ackDesc = true && that.isSetAckDesc();
    if (this_present_ackDesc || that_present_ackDesc) {
      if (!(this_present_ackDesc && that_present_ackDesc))
        return false;
      if (!this.ackDesc.equals(that.ackDesc))
        return false;
    }

    boolean this_present_extramap = true && this.isSetExtramap();
    boolean that_present_extramap = true && that.isSetExtramap();
    if (this_present_extramap || that_present_extramap) {
      if (!(this_present_extramap && that_present_extramap))
        return false;
      if (!this.extramap.equals(that.extramap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPage()) ? 131071 : 524287);
    if (isSetPage())
      hashCode = hashCode * 8191 + page.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status;

    hashCode = hashCode * 8191 + ((isSetAckCode()) ? 131071 : 524287);
    if (isSetAckCode())
      hashCode = hashCode * 8191 + ackCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetAckDesc()) ? 131071 : 524287);
    if (isSetAckDesc())
      hashCode = hashCode * 8191 + ackDesc.hashCode();

    hashCode = hashCode * 8191 + ((isSetExtramap()) ? 131071 : 524287);
    if (isSetExtramap())
      hashCode = hashCode * 8191 + extramap.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(BlnAckBean other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAckCode()).compareTo(other.isSetAckCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAckCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ackCode, other.ackCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAckDesc()).compareTo(other.isSetAckDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAckDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ackDesc, other.ackDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExtramap()).compareTo(other.isSetExtramap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtramap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extramap, other.extramap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BlnAckBean(");
    boolean first = true;

    if (isSetPage()) {
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
    }
    if (isSetAckCode()) {
      if (!first) sb.append(", ");
      sb.append("ackCode:");
      if (this.ackCode == null) {
        sb.append("null");
      } else {
        sb.append(this.ackCode);
      }
      first = false;
    }
    if (isSetAckDesc()) {
      if (!first) sb.append(", ");
      sb.append("ackDesc:");
      if (this.ackDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.ackDesc);
      }
      first = false;
    }
    if (isSetExtramap()) {
      if (!first) sb.append(", ");
      sb.append("extramap:");
      if (this.extramap == null) {
        sb.append("null");
      } else {
        sb.append(this.extramap);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (page != null) {
      page.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BlnAckBeanStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BlnAckBeanStandardScheme getScheme() {
      return new BlnAckBeanStandardScheme();
    }
  }

  private static class BlnAckBeanStandardScheme extends org.apache.thrift.scheme.StandardScheme<BlnAckBean> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BlnAckBean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.page = new BlnPageBean();
              struct.page.read(iprot);
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACK_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ackCode = iprot.readString();
              struct.setAckCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACK_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ackDesc = iprot.readString();
              struct.setAckDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXTRAMAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.extramap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map0.size);
                java.lang.String _key1;
                java.lang.String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.extramap.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setExtramapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BlnAckBean struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.page != null) {
        if (struct.isSetPage()) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStatus()) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.ackCode != null) {
        if (struct.isSetAckCode()) {
          oprot.writeFieldBegin(ACK_CODE_FIELD_DESC);
          oprot.writeString(struct.ackCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ackDesc != null) {
        if (struct.isSetAckDesc()) {
          oprot.writeFieldBegin(ACK_DESC_FIELD_DESC);
          oprot.writeString(struct.ackDesc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.extramap != null) {
        if (struct.isSetExtramap()) {
          oprot.writeFieldBegin(EXTRAMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extramap.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter4 : struct.extramap.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BlnAckBeanTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BlnAckBeanTupleScheme getScheme() {
      return new BlnAckBeanTupleScheme();
    }
  }

  private static class BlnAckBeanTupleScheme extends org.apache.thrift.scheme.TupleScheme<BlnAckBean> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BlnAckBean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPage()) {
        optionals.set(0);
      }
      if (struct.isSetStatus()) {
        optionals.set(1);
      }
      if (struct.isSetAckCode()) {
        optionals.set(2);
      }
      if (struct.isSetAckDesc()) {
        optionals.set(3);
      }
      if (struct.isSetExtramap()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetPage()) {
        struct.page.write(oprot);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetAckCode()) {
        oprot.writeString(struct.ackCode);
      }
      if (struct.isSetAckDesc()) {
        oprot.writeString(struct.ackDesc);
      }
      if (struct.isSetExtramap()) {
        {
          oprot.writeI32(struct.extramap.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter5 : struct.extramap.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BlnAckBean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.page = new BlnPageBean();
        struct.page.read(iprot);
        struct.setPageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ackCode = iprot.readString();
        struct.setAckCodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ackDesc = iprot.readString();
        struct.setAckDescIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extramap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map6.size);
          java.lang.String _key7;
          java.lang.String _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readString();
            _val8 = iprot.readString();
            struct.extramap.put(_key7, _val8);
          }
        }
        struct.setExtramapIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

